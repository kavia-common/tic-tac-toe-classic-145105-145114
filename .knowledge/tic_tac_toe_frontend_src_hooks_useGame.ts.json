{"is_source_file": true, "format": "TypeScript", "description": "This file defines a custom React hook 'useGame' for managing the state and behavior of a Tic-Tac-Toe game, including move logic, AI moves, game reset, and interaction with user settings and scoring.", "external_files": ["../utils/game", "./useSettings", "./useScore"], "external_methods": ["getAIMove", "getWinner", "isDraw", "makeMove", "useSettings", "useScore"], "published": ["useGame"], "classes": [], "methods": [{"name": "export function useGame() { useGame", "description": "Main hook providing game state management, move handling, AI interaction, and reset capabilities for Tic-Tac-Toe.", "scope": "", "scopeKind": ""}, {"name": "function initialPlayer(playerStarts: boolean): 'X' | 'O' { initialPlayer", "description": "Helper function to determine starting player based on question boolean.", "scope": "", "scopeKind": ""}, {"name": "reset", "description": "Resets the game state to initial conditions, optionally setting the starting player."}, {"name": "move", "description": "Handles a move made by a player at a specific index, updating game state and checking for win or draw conditions."}], "calls": ["makeMove", "getWinner", "isDraw", "getAIMove"], "search-terms": ["useGame", "useSettings", "useScore", "tic-tac-toe", "AI move", "game state", "custom React hook"], "state": 2, "file_id": 15, "knowledge_revision": 34, "git_revision": "", "ctags": [{"_type": "tag", "name": "EndState", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/hooks/useGame.ts", "pattern": "/^type EndState = { status: 'win' | 'draw' | 'ongoing'; winner: 'X' | 'O' | null; line: number[] |/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "addDraw", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/hooks/useGame.ts", "pattern": "/^  const { addWin, addDraw } = useScore();$/", "language": "TypeScript", "kind": "constant", "scope": "useGame", "scopeKind": "function"}, {"_type": "tag", "name": "addWin", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/hooks/useGame.ts", "pattern": "/^  const { addWin, addDraw } = useScore();$/", "language": "TypeScript", "kind": "constant", "scope": "useGame", "scopeKind": "function"}, {"_type": "tag", "name": "aiShouldMove", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/hooks/useGame.ts", "pattern": "/^  const aiShouldMove = useMemo(() => settings.vsAI && ((settings.playerStarts && turn === 'O') |/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "board", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/hooks/useGame.ts", "pattern": "/^  const [board, setBoard] = useState<Board>(emptyBoard());$/", "language": "TypeScript", "kind": "constant", "scope": "useGame", "scopeKind": "function"}, {"_type": "tag", "name": "end", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/hooks/useGame.ts", "pattern": "/^  const [end, setEnd] = useState<EndState>({ status: 'ongoing', winner: null, line: null });$/", "language": "TypeScript", "kind": "constant", "scope": "useGame", "scopeKind": "function"}, {"_type": "tag", "name": "initialPlayer", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/hooks/useGame.ts", "pattern": "/^function initialPlayer(playerStarts: boolean): 'X' | 'O' {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "move", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/hooks/useGame.ts", "pattern": "/^  const move = useCallback((idx: number) => {$/", "language": "TypeScript", "kind": "constant", "scope": "useGame", "scopeKind": "function"}, {"_type": "tag", "name": "next", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/hooks/useGame.ts", "pattern": "/^    const next = makeMove(board, idx, turn);$/", "language": "TypeScript", "kind": "constant", "scope": "useGame", "scopeKind": "function"}, {"_type": "tag", "name": "reset", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/hooks/useGame.ts", "pattern": "/^  const reset = useCallback((playerStarts?: boolean) => {$/", "language": "TypeScript", "kind": "constant", "scope": "useGame", "scopeKind": "function"}, {"_type": "tag", "name": "setBoard", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/hooks/useGame.ts", "pattern": "/^  const [board, setBoard] = useState<Board>(emptyBoard());$/", "language": "TypeScript", "kind": "constant", "scope": "useGame", "scopeKind": "function"}, {"_type": "tag", "name": "setEnd", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/hooks/useGame.ts", "pattern": "/^  const [end, setEnd] = useState<EndState>({ status: 'ongoing', winner: null, line: null });$/", "language": "TypeScript", "kind": "constant", "scope": "useGame", "scopeKind": "function"}, {"_type": "tag", "name": "setTurn", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/hooks/useGame.ts", "pattern": "/^  const [turn, setTurn] = useState<'X' | 'O'>(initialPlayer(settings.playerStarts));$/", "language": "TypeScript", "kind": "constant", "scope": "useGame", "scopeKind": "function"}, {"_type": "tag", "name": "settings", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/hooks/useGame.ts", "pattern": "/^  const { settings } = useSettings();$/", "language": "TypeScript", "kind": "constant", "scope": "useGame", "scopeKind": "function"}, {"_type": "tag", "name": "tm", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/hooks/useGame.ts", "pattern": "/^    const tm = setTimeout(() => {$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "turn", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/hooks/useGame.ts", "pattern": "/^  const [turn, setTurn] = useState<'X' | 'O'>(initialPlayer(settings.playerStarts));$/", "language": "TypeScript", "kind": "constant", "scope": "useGame", "scopeKind": "function"}, {"_type": "tag", "name": "useGame", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/hooks/useGame.ts", "pattern": "/^export function useGame() {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "w", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/hooks/useGame.ts", "pattern": "/^    const w = getWinner(next);$/", "language": "TypeScript", "kind": "constant", "scope": "useGame", "scopeKind": "function"}], "hash": "d2cb596d45ca576d9bf9fa643fefdf8d", "format-version": 4, "code-base-name": "tic_tac_toe_frontend", "filename": "tic_tac_toe_frontend/src/hooks/useGame.ts", "revision_history": [{"34": ""}]}