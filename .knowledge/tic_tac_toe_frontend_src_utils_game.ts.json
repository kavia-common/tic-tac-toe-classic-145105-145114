{"is_source_file": true, "format": "TypeScript", "description": "This file defines types, utility functions, and algorithms related to the game logic of a Tic-Tac-Toe game, including winner determination, move generation, and minimax AI algorithm for optimal move calculation.", "external_files": [], "external_methods": [], "published": ["Cell", "Board", "Winner", "emptyBoard", "checkWinner", "getBestMove"], "classes": [], "methods": [{"name": "export function checkWinner(board: Board): Winner { checkWinner", "description": "Determines the winner of the current board state ('X', 'O', 'DRAW', or null if ongoing).", "scope": "", "scopeKind": ""}, {"name": "export function getBestMove(board: Board, ai: 'X' | 'O', firstPlayer: 'X' | 'O'): number { getBestMove", "description": "Calculates the optimal move index for the AI player using the minimax algorithm with alpha-beta pruning.", "scope": "", "scopeKind": ""}, {"name": "function availableMoves(board: Board): number[] { availableMoves", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "function makeMove(board: Board, idx: number, player: 'X' | 'O'): Board { makeMove", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "function minimax(board: Board, player: 'X' | 'O', ai: 'X' | 'O', depth = 0, alpha = -Infinity, b/ minimax", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "function scoreWinner(w: Winner, depth: number, ai: 'X' | 'O') { scoreWinner", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["checkWinner", "availableMoves", "makeMove", "minimax", "scoreWinner"], "search-terms": ["tic-tac-toe", "minimax", "AI move calculation", "board evaluation", "game logic", "TypeScript game logic"], "state": 2, "file_id": 9, "knowledge_revision": 19, "git_revision": "", "ctags": [{"_type": "tag", "name": "Board", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^export type Board = Cell[];$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "Cell", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^export type Cell = 'X' | 'O' | null;$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "MinimaxResult", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^type MinimaxResult = { score: number; move: number | null };$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "Winner", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^export type Winner = 'X' | 'O' | 'DRAW' | null;$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "a", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  for (const [a, b, c] of lines) {$/", "language": "TypeScript", "kind": "constant", "scope": "checkWinner", "scopeKind": "function"}, {"_type": "tag", "name": "availableMoves", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^function availableMoves(board: Board): number[] {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "b", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  for (const [a, b, c] of lines) {$/", "language": "TypeScript", "kind": "constant", "scope": "checkWinner", "scopeKind": "function"}, {"_type": "tag", "name": "c", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  for (const [a, b, c] of lines) {$/", "language": "TypeScript", "kind": "constant", "scope": "checkWinner", "scopeKind": "function"}, {"_type": "tag", "name": "checkWinner", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^export function checkWinner(board: Board): Winner {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "copy", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  const copy = board.slice();$/", "language": "TypeScript", "kind": "constant", "scope": "makeMove", "scopeKind": "function"}, {"_type": "tag", "name": "emptyBoard", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^export const emptyBoard = (): Board => Array(9).fill(null);$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "evalRes", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^      const evalRes = minimax(makeMove(board, m, player), player === 'X' ? 'O' : 'X', ai, depth /", "language": "TypeScript", "kind": "constant", "scope": "minimax", "scopeKind": "function"}, {"_type": "tag", "name": "getBestMove", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^export function getBestMove(board: Board, ai: 'X' | 'O', firstPlayer: 'X' | 'O'): number {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "lines", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  const lines = [$/", "language": "TypeScript", "kind": "constant", "scope": "checkWinner", "scopeKind": "function"}, {"_type": "tag", "name": "m", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^    for (const m of moves) {$/", "language": "TypeScript", "kind": "constant", "scope": "minimax", "scopeKind": "function"}, {"_type": "tag", "name": "makeMove", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^function makeMove(board: Board, idx: number, player: 'X' | 'O'): Board {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "minimax", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^function minimax(board: Board, player: 'X' | 'O', ai: 'X' | 'O', depth = 0, alpha = -Infinity, b/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "moves", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  const moves = availableMoves(board);$/", "language": "TypeScript", "kind": "constant", "scope": "minimax", "scopeKind": "function"}, {"_type": "tag", "name": "moves", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  const moves: number[] = [];$/", "language": "TypeScript", "kind": "constant", "scope": "availableMoves", "scopeKind": "function"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  const res = checkWinner(board);$/", "language": "TypeScript", "kind": "constant", "scope": "minimax", "scopeKind": "function"}, {"_type": "tag", "name": "scoreWinner", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^function scoreWinner(w: Winner, depth: number, ai: 'X' | 'O') {$/", "language": "TypeScript", "kind": "function"}], "hash": "7b96a11bca025c10c789e8a19b5ec580", "format-version": 4, "code-base-name": "tic_tac_toe_frontend", "filename": "tic_tac_toe_frontend/src/utils/game.ts", "revision_history": [{"19": ""}]}