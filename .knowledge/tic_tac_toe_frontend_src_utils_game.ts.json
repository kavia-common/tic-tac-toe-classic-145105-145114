{"is_source_file": true, "format": "TypeScript", "description": "This file provides utility functions and type definitions for managing the game state of a Tic Tac Toe game, including board cloning, move making, winner detection, and AI move strategies (random, tactical, minimax).", "external_files": [], "external_methods": [], "published": ["CellValue", "Board", "WIN_LINES", "cloneBoard", "emptyBoard", "getWinner", "isDraw", "getAvailableMoves", "makeMove", "getAIMove"], "classes": [], "methods": [{"name": "export function cloneBoard(b: Board): Board { cloneBoard", "description": "Creates a shallow copy of the game board array.", "scope": "", "scopeKind": ""}, {"name": "export function emptyBoard(): Board { emptyBoard", "description": "Initializes and returns an empty game board with all null values.", "scope": "", "scopeKind": ""}, {"name": "export function getWinner(board: Board): { winner: 'X' | 'O' | null; line: number[] | null } { getWinner", "description": "Determines if there's a winner on the current board and returns the winner and winning line.", "scope": "", "scopeKind": ""}, {"name": "export function isDraw(board: Board): boolean { isDraw", "description": "Checks if the game is a draw, i.e., the board is full with no winner.", "scope": "", "scopeKind": ""}, {"name": "export function getAvailableMoves(board: Board): number[] { getAvailableMoves", "description": "Returns a list of indices of available moves (empty cells).", "scope": "", "scopeKind": ""}, {"name": "export function makeMove(board: Board, idx: number, player: 'X' | 'O'): Board { makeMove", "description": "Returns a new board state after placing a player's mark at the specified index.", "scope": "", "scopeKind": ""}, {"name": "export function getAIMove(board: Board, player: 'X' | 'O', level: 'easy' | 'medium' | 'hard'): n/ getAIMove", "description": "Selects an AI move based on the difficulty level ('easy', 'medium', 'hard') using different strategies.", "scope": "", "scopeKind": ""}, {"name": "function minimax(board: Board, player: 'X' | 'O', maximizing: boolean, ai: 'X' | 'O'): { score: / minimax", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "function randomMove(board: Board): number | null { randomMove", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "function tacticalMove(board: Board, player: 'X' | 'O'): number | null { tacticalMove", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["getAvailableMoves", "makeMove", "getWinner", "randomMove", "tacticalMove", "minimax"], "search-terms": ["Tic Tac Toe", "board manipulation", "AI strategies", "minimax", "game utility functions"], "state": 2, "file_id": 12, "knowledge_revision": 30, "git_revision": "", "ctags": [{"_type": "tag", "name": "Board", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^export type Board = CellValue[];$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "CellValue", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^export type CellValue = 'X' | 'O' | null;$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "Infinity", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  let best: { score: number; move: number | null } = { score: maximizing ? -Infinity : Infinity,/", "language": "TypeScript", "kind": "variable"}, {"_type": "tag", "name": "WIN_LINES", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^export const WIN_LINES: number[][] = [$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "a", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^    const [a,b,c] = line;$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "ai", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  const current = maximizing ? ai : (ai === 'X' ? 'O' : 'X');$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "avail", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  const avail = getAvailableMoves(board);$/", "language": "TypeScript", "kind": "constant", "scope": "randomMove", "scopeKind": "function"}, {"_type": "tag", "name": "b", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^    const [a,b,c] = line;$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "b", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^    const b = makeMove(board, i, opp);$/", "language": "TypeScript", "kind": "constant", "scope": "tacticalMove", "scopeKind": "function"}, {"_type": "tag", "name": "b", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^    const b = makeMove(board, i, player);$/", "language": "TypeScript", "kind": "constant", "scope": "tacticalMove", "scopeKind": "function"}, {"_type": "tag", "name": "best", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  let best: { score: number; move: number | null } = { score: maximizing ? -Infinity : Infinity,/", "language": "TypeScript", "kind": "variable"}, {"_type": "tag", "name": "c", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^    const [a,b,c] = line;$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "cloneBoard", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^export function cloneBoard(b: Board): Board {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "current", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  const current = maximizing ? ai : (ai === 'X' ? 'O' : 'X');$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "emptyBoard", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^export function emptyBoard(): Board {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "getAIMove", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^export function getAIMove(board: Board, player: 'X' | 'O', level: 'easy' | 'medium' | 'hard'): n/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "getAvailableMoves", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^export function getAvailableMoves(board: Board): number[] {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "getWinner", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^export function getWinner(board: Board): { winner: 'X' | 'O' | null; line: number[] | null } {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "i", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  for (const i of getAvailableMoves(board)) {$/", "language": "TypeScript", "kind": "constant", "scope": "tacticalMove", "scopeKind": "function"}, {"_type": "tag", "name": "i", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  for (const i of getAvailableMoves(board)) {$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "isDraw", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^export function isDraw(board: Board): boolean {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "line", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  for (const line of WIN_LINES) {$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "makeMove", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^export function makeMove(board: Board, idx: number, player: 'X' | 'O'): Board {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "minimax", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^function minimax(board: Board, player: 'X' | 'O', maximizing: boolean, ai: 'X' | 'O'): { score: /", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "move", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  let best: { score: number; move: number | null } = { score: maximizing ? -Infinity : Infinity,/", "language": "TypeScript", "kind": "variable"}, {"_type": "tag", "name": "next", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^    const next = makeMove(board, i, current);$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "next", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  const next = cloneBoard(board);$/", "language": "TypeScript", "kind": "constant", "scope": "makeMove", "scopeKind": "function"}, {"_type": "tag", "name": "opp", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  const opp: 'X' | 'O' = player === 'X' ? 'O' : 'X';$/", "language": "TypeScript", "kind": "constant", "scope": "tacticalMove", "scopeKind": "function"}, {"_type": "tag", "name": "r", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  const r = Math.floor(Math.random() * avail.length);$/", "language": "TypeScript", "kind": "constant", "scope": "randomMove", "scopeKind": "function"}, {"_type": "tag", "name": "randomMove", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^function randomMove(board: Board): number | null {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  const res = minimax(board, player, true, player);$/", "language": "TypeScript", "kind": "constant", "scope": "getAIMove", "scopeKind": "function"}, {"_type": "tag", "name": "result", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^  const result = getWinner(board);$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "t", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^    const t = tacticalMove(board, player);$/", "language": "TypeScript", "kind": "constant", "scope": "getAIMove", "scopeKind": "function"}, {"_type": "tag", "name": "tacticalMove", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^function tacticalMove(board: Board, player: 'X' | 'O'): number | null {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "val", "path": "/home/kavia/workspace/code-generation/tic-tac-toe-classic-145105-145114/tic_tac_toe_frontend/src/utils/game.ts", "pattern": "/^    const val = minimax(next, player, !maximizing, ai);$/", "language": "TypeScript", "kind": "constant"}], "hash": "113765db85f91da5cf50e9d68f5a05ab", "format-version": 4, "code-base-name": "tic_tac_toe_frontend", "filename": "tic_tac_toe_frontend/src/utils/game.ts", "fields": [{"name": "let best: { score: number; move: number | null } = { score: maximizing ? -Infinity : Infinity,/", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"30": ""}]}